@using BlazingOrchard.Contents.Models
@using BlazingOrchard.Contents.Services
@using BlazingOrchard.DisplayManagement.Models
@using BlazingOrchard.DisplayManagement.Blazor.Components
@using BlazingOrchard.DisplayManagement.Shapes
@using BlazingOrchard.Contents.Display.Services

@if (Shape != null)
{
    <ShapeView Shape="Shape"/>
}

@code {
    [Parameter] public ContentItem? ContentItem { get; set; }
    [Parameter] public string? Alias { get; set; }
    [Parameter] public string? DisplayType { get; set; }
    [Inject] private IContentProvider ContentProvider { get; set; } = default!;
    [Inject] private IContentDisplayManager ContentDisplayManager { get; set; } = default!;
    private IShape? Shape { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrWhiteSpace(Alias))
            ContentItem = await ContentProvider.GetByAliasAsync(Alias);

        if (ContentItem != null)
            Shape = await ContentDisplayManager.BuildDisplayAsync(ContentItem, DisplayType);
    }
}